/* Fade in animation */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fadeIn {
  animation: fadeIn 1s ease-out forwards;
}

/* Utility classes for animations that can be used with Tailwind */
.transition-transform {
  transition-property: transform;
}

.hover\:scale-105:hover {
  transform: scale(1.05);
}

.hover\:translate-y-\[-8px\]:hover {
  transform: translateY(-8px);
}

/* Animations for the scrolling sections */
.scroll-reveal {
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.6s ease-out, transform 0.6s ease-out;
}

.scroll-reveal.revealed {
  opacity: 1;
  transform: translateY(0);
}

/* Add delay to staggered animations */
.delay-100 {
  transition-delay: 100ms;
}

.delay-200 {
  transition-delay: 200ms;
}

.delay-300 {
  transition-delay: 300ms;
}

.delay-400 {
  transition-delay: 400ms;
}

/* Pulse animation for buttons */
@keyframes pulse {
  0%, 100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

.animate-pulse {
  animation: pulse 2s infinite;
}

/* Gradient animation */
@keyframes gradientAnimation {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.animate-gradient {
  background-size: 200% 200%;
  animation: gradientAnimation 5s ease infinite;
}

/* Add scroll reveal script to be initialized in a useEffect */
/* 
  Example usage in a component:

  useEffect(() => {
    const scrollElements = document.querySelectorAll('.scroll-reveal');
    
    const elementInView = (el, dividend = 1) => {
      const elementTop = el.getBoundingClientRect().top;
      return (
        elementTop <= (window.innerHeight || document.documentElement.clientHeight) / dividend
      );
    };
    
    const displayScrollElement = (element) => {
      element.classList.add('revealed');
    };
    
    const hideScrollElement = (element) => {
      element.classList.remove('revealed');
    };
    
    const handleScrollAnimation = () => {
      scrollElements.forEach((el) => {
        if (elementInView(el, 1.25)) {
          displayScrollElement(el);
        } else {
          hideScrollElement(el);
        }
      });
    };
    
    window.addEventListener('scroll', handleScrollAnimation);
    
    // Initial check for elements in view
    handleScrollAnimation();
    
    return () => {
      window.removeEventListener('scroll', handleScrollAnimation);
    };
  }, []);
*/